/*
 * This source file was generated by the Gradle 'init' task
 */
package lab7;
import java.util.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;


public class Huffman {

public static Map<Character, Integer> map;

    public static void main(String[] args) {
        String fileName = args[0];
        File file = new File(fileName);
        Scanner scan;
        try{
            scan = new Scanner(file);
        }   
        catch (FileNotFoundException e){
            return;
        }
        map = new HashMap<>();
        countFrequencies(scan.toString());
        PriorityQueue<Node> tree = new PriorityQueue<Node>(map.size(), new NodeComparator());
        buildTree(tree);

    }

    public static void countFrequencies(String input){
        for(int i = 0; input.length() > i; i++){
            map.put(input.charAt(i), (map.get(input.charAt(i) + 1)));
        }
    }

    public static void buildTree(PriorityQueue<Node> tree){
        //Create Nodes out of our frequency count
        //Take two smallest frequency nodes (leaf or not)

    }


    class Node{
        //Fields for node.
        int frequency;
        Character character;
        Node left;
        Node right;

        //Constructor for leaf nodes
        Node(int frequency, Character character){
            this.left = null; //leaf node, so set node's children to null.
            this.right = null;
            this.frequency = frequency;
            this.character = character;
        }

        //Constructor for internal nodes
        Node(int frequency, Node left, Node right){
            this.left = left;
            this.right = right;
            this.frequency = frequency;
            this.character = null; //Internal node, so set node's character field to null.
        }
    }

    //Override the priority queue comparison to compare frequencies
    class NodeComparator implements Comparator<Node>{
        public int compare(Node n1, Node n2){
            if(n1.frequency < n2.frequency){
                return 1;
            }
            else if(n1.frequency > n2.frequency){
                return -1;
            }
            else{
                return 0;
            }
        }
    }
}
